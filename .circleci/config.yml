version: 2.1

workflows:
  build-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - main

jobs:
  build:
    working_directory: ~/ExampleApplication-20250204
    docker:
      - image: cimg/node:18.19.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm
          command: npm install
      - run:
          name: test-run
          command: npm run test
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
  deploy:
    docker:
      - image: cimg/node:18.19.0
    steps:
      - checkout
      - run:
          name: Setup SSH 
          command: |
            mkdir -p ~/.ssh
            # Make sure the private key is properly base64 decoded if needed
            echo "$SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa 2>/dev/null || echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ls -la ~/.ssh/
            # Check if the key begins with proper format
            echo "Key format check (first line):"
            cat ~/.ssh/id_rsa | head -n 1
            # Add the host to known hosts with more verbose output
            ssh-keyscan -v -H $EC2_PUBLIC_DNS >> ~/.ssh/known_hosts
            # Add SSH debugging
            echo "SSH config for debugging:"
            echo "Host *" > ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  LogLevel DEBUG3" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
      - run:
          name: deploy-application
          command: |
            echo "Testing SSH connection with verbose debugging:"
            ssh -v $EC2_USERNAME@$EC2_PUBLIC_DNS "echo 'SSH connection successful'"
            
            echo "Proceeding with deployment:"
            ssh $EC2_USERNAME@$EC2_PUBLIC_DNS "rm -rf ExampleApplication/;git clone https://github.com/SNNCI/ExampleApplication.git; source ExampleApplication/deploy.sh"